import sys
import pytest
import math

from lib import *
from util import *
import constants

import cProfile

def test_week4():
  print_sep("Randomized Motif Search")
  
  input=(['GAAATGGACCTTTGTAAGCTCCCTTCAAAGTGGTTCAATTTTAAGCCCACGAAACCCCTCCCTTATGTCTAGATAACGTCAACGCCTGGAAACGCAACGCGTTCGCACACAGCCGTGCCCTGGCGCTTGGATCGGCCCCTTATGAGAGATGGAAGAAATGGACCTTTGT','AAGCTCCCTTCAAAGTGGTTCAATTTTAAGCCCACGAAGTCCCATATTTTTGCACCCCTCCCTTATGTCTAGATAACGTCAACGCCTGGAAACGCAACGCGTTCGCACACAGCCGTGCCCTGGCGCTTGGATCGGCCCCTTATGAGAGATGGAAGAAATGGACCTTTGT','ACTGTTGCATGTATTTTTGACAGGGTATTGAGTGGTTAGCAAGGATCCTCGAAAACGCCCACTCTCCAAGGGAATAATCAAGCAATCAGTTGCACATCAGTACAGTCGATAGGTTGTATTCCCTCGTAGAGATTGTGGTAAGTCGCGAGTGATAAGTTATGCTTTCAAC','CAAGGGCGTGGTCTTGTTCAGGTATCACGTATTGACGGATGGAATGTGTACTTACTGCTGCTCGGAAGCTTTCGGCGATAAAGAACGTTGATTCCAGGCGCTCTCGTCGAGTCATGTATCACTGCTGCAAATACGTGGTCCACTATGTCTTTGCAATTCGACGGACTAA','CGAGCTGGATGCCCATAATCGGTCATGTATTCCCGCTGCACGCCGGTGGAGCTTATCCGAACACGGACTCTGCGCCGGGCGTCCCATCAGCATAGAAACTCTCATCATGTAATGACGCGCGAACCTTATCGGTTCGCGTCTAACATGGTGCTGCCTTGCTGTTGTACTG','AAATGATGGTCAGTCACCATGCATGGACCTCATGTATTTTTATAGGCGGACTCAGACTATCCTACGAAAGTGAGGGCCCGGTACGCAGACAGAACGCGCGAGGCGACCGCGTCCCGCGATGGAAAGGGGATGCCGCCGGCCAACTTTCAGTCTGCTGAGTCTACGATTG','ACCCCTGCTCGCGTTTTCCTTTACAGCCGAGTGGTCAGTACGCCTACACCAGTCCCGTTCGGTATCCAGCAAGCCAACCATTTGGAGGGCTGTGGGCAAACGTCATGATATTTTGCCGGACAATTCACCTACGTAAGATAAACAATGGCCGGGTACTCTCCGCTTTCGG','TTCTACAGGAGGTTCACGAAGGGCCGCAGAATTACCTCCAAGCTCATCAAGACGGGGCGAAAACCGTGGACTTTATAATGGAGGAGACATACACCCGTGGCCAACAGAAGCTATACGGGTCCCACTTGATCGCGTTGACTCGGGGGTCATGTTGATTTGCCCCCATCTC','TAAAAATTAGGCTCAAGCATGTAGGACTGAAAGCATTTCCAGCATTCGTTCCTCTCACTCCCTCCACGAGGGGGGATCGCGATCTAGTACCTTCACCACCAAGGGGACTGGTCATGTATTTGCCCGGTCGCTATCCCCTAGGCCCATGCCGGACATTTACAAGCCAACG','TTATTCCACGTGATTTGAGTTCTAACCACCCGCGCCTTCGTATCGCCACGAGGGTTGTATTTTTGCCAGATGATCCCTTAACCGTGGGCAAAATAGAACCCTGAGGATAGACACGGGTTTGGGCGCCTCCCAGAGGTGCTACTCACGCGAGGTTTAACAAGCATCAGTA','TGAAACTTACCAAAGTTCGCCTTGCCTGTCCCGGCCCGCAGCCCTCTGGATCTGGACGGGAGAAAGGCAGTTGCGGGTGACACAAGCTGGAAAAGAACGGTAGTACAAGTTTTAGGGTAGCGGTGCTACGGATCACCCACTAAATATGTATTTTTGCAGGCGACTAGAC','CTAGGGATCGTCCAGTCCAAAAAATGATCGCCGATGGTCAACCATTTTTGCCATCTGATAGAGAGTTTCATCTTATGCAGCTAATCACTACCGCGCTGTTCTTGGGGCCTGAACCGCCTACGTGGGTGGACCTGATTATTCTGCCCGGCTCAACTATCGTTGCTCCAAT','TCCGATGAACGGCAAGGGAGGTGCCAAGACATACGGTTAGACGCTCCCTATGTCATGTATTTTCATATCAGGCGGAGGTCCGTGTCTACCAGCTCGGGTCACCTAGGGGGATAGCGTTGTATAGGATCGCTTGTGTGGTCGCACTGAAGCGGAAAAATTAGGGGCCGTC','ACCGATATACACCCCTGCCTCCTTGTCGTCTTGGTCAGTGAATTGTGCGCCGCGTGTGGCACCTAGTTAACACGAAGCAACTAACTATCGCCGATGTTTGCCCCCAATCGCTTCTAGCTACCCACGTCATGTAAGCTTGCCGTTATGTCCCCGTCAGGCCCGGGTAGTA','AAACATCAAACAGTAAAATATAGTTTCCGTTATAGTCTACCCGGTAGTAGCGTATTTTTGCGATACAGAAGTCCGAGAGCAAGGATTAGTTATGCGTGGGAAAGCACCTGGTGCTTTATCCCTTACACTGCGACGATTTAAGGCCTCTGTGTATATACTCGACTTACAA','AGCTAGTCCCTTATTTTTGCCGATCGAAATAGTGGCATTTGTTGGTTCGAGGGAACGTATGACCGATTGTTGAGTGACCCGATTTATGGGCCGTACCAACTTGCGCGCATACTCCATACTCTACACACACGTTTTACCGAGAGAACTTGAAGCCAATGCGACCTAAACA','CCAAGAGGCTATTAGCGGCACAGGGTGCGTGCCTCGTGATTTCGGAGTGCTTTAGTCCCAAAAAGGAAGCGGCTGAGGTGACTGCGCTTCCTAAGTTTCAACGCGGTGGGTGCGCGCGAAGTCACTAATTTTTGCCGTGGCGGTCTAATAGACAAGCTGGGGTGTGTCG','GGCCGTCGTACATTTGATCTCGGCGGGCCCTCACAGCAGGGTCCTCTGCGTGCACCCCGCATATGAGGACCCCCTAAATTTGTACATGAGTGAGGGTCATAGCTTTTTGCTTACCCCACAACGTAAGTATGATTGATGAGATTCTAGTGCGGGGCTAGTTAATTGTACA','CGCACCAGCCTTGTTCGCTCATCCCGTCATGACATTTTGCTTGTTTGAACCCCTTTTACAGATCAGATACGGCTTAATTTACGACACACAGGCAGTAGATACGCTGGTGGGTGTACAATAAAAAGCACCTTGTACTCAGCCATCGCCGGGCCGCACGATGAAGGTGGCG','ACGCCAAGTGGCTGTGTGGCCGCACGAAGTTTTCATGGACCGAAGCCCAACTACGTCATCAGTTTTTGCAGTGTGCAGCCTTTCGTCCCACGGATCGGTGGTCTAAAGTCGACCTATGCGAGGACGCTTGGTAACATTCGAGCTCTTACCCCTTATAGTCATATGTCCG'],
         15)
  print(f"k={input[1]}-motif search on {input[0]}")
  #soln = randomized_motif_search(*input, iterations=1000, debug=False) #takes about 1.5s/10 iters
  #print(soln)
  #print_iter(soln[0])

  print_sep("")
  print("Compute the probability that ten randomly selected 15-mers from the ten 600-nucleotide long strings in the Subtle Motif Problem capture at least one implanted 15-mer. (Allowable error: 0.000001)")
  L,n,k = 600,10,15

  num_kmers = (L-k+1)
  prob_not_capturing = (num_kmers-1)/num_kmers #because we know that it has been implanted once at a particular index in the string
  prob_not_capturing_all = math.pow(prob_not_capturing, 10)
  prob_capturing_atleast_one =  1 - prob_not_capturing_all
  print(f"Probability: {prob_capturing_atleast_one:.8f}")

  print("Now, compute the probability of capturing atleast 2 implanted 15-mers")
  prob_capturing_exactly_one = (1/num_kmers)  * math.pow((num_kmers-1)/num_kmers,9) * 10
  prob_capturing_atleast_two = prob_capturing_atleast_one - prob_capturing_exactly_one
  print(f"Probability: {prob_capturing_atleast_two:.8f}")



if __name__ == '__main__':
  sys.exit(pytest.main(["-s", "week4.py::test_week4"])) #-s to not suppress prints
